import type {NextPage} from 'next'
import Head from 'next/head'
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import TextField from '@mui/material/TextField';
import { Box, Typography, type SxProps, Stepper, Step, StepButton, StepLabel, Button, Paper, Grid } from '@mui/material';
import { useState } from 'react';
import style from '../../styles/commons.module.css';
import { useForm } from 'react-hook-form';

const checkoutSteps = ['Datos personales', 'Entrega', 'Pago'];

const CheckoutPage: NextPage = () => {
  const [activeStep, setActiveStep] = useState(0)
  const { register, handleSubmit, formState: { errors }, watch } = useForm();
  const watchedFields = watch();

  const handleNextStep = () => {
    if (activeStep < checkoutSteps.length - 1) {
      setActiveStep((step) => step + 1);
    }
  };

  const handleBackStep = () => {
    if (activeStep > 0) {
      setActiveStep((step) => step - 1);
    }
  };

  console.log(errors);

  const onSubmit = async (result: any) => {
    console.log({errors});
    console.log({result});
    
    // const result = await handleSubmit((data) => data)() as unknown as Record<string, string>;
    // if (result) {
    //     if (!result.nombre || !result.apellido || !result.email) {
    //         setActiveStep(0);
    //         return;
    //     }
    //     if (!result.direccion || !result.ciudad || !result.provincia || !result.codigoPostal) {
    //         setActiveStep(1);
    //         return;
    //     }
    //     if (!result.numeroTarjeta || !result.nombreTarjeta || !result.fechaExpiracion || !result.codigoSeguridad) {
    //         setActiveStep(2);
    //         return;
    //     }
    // }
  }

    return (
        <>
          <Head>
              <title>Checkout</title>
              <meta name="description" content="Generated by create next app"/>
              <link rel="icon" href="/favicon.ico"/>
          </Head>
          <Paper elevation={3} style={{ padding: '20px', marginTop: '20px', width: '50rem' }}>
          <BodySingle>
            <Typography variant="h2">Compra</Typography>
            <Stepper activeStep={activeStep}>
              {checkoutSteps.map((label, index) => (
                <Step key={index}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
            <form onSubmit={handleSubmit(onSubmit)}>
              {activeStep === 0 && (
                <>
                  <Typography pb={1}>Datos personales</Typography>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Nombre"
                        {...register('name', { required: 'Este campo es obligatorio' })}
                        error={Boolean(errors.name)}
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Apellido"
                      {...register('surname', { required: 'Este campo es obligatorio' })}
                        error={Boolean(errors.surname)}
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Email" type="email"
                      {...register('email', { required: 'Este campo es obligatorio', pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i, message: "Email inválido" } })} error={Boolean(errors.email)}
                      />
                    </Grid>
                  </Grid>
                </>
              )}

              {activeStep === 1 && (
                <>
                  <Typography pb={1}>Datos de la entrega</Typography>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Dirección" {...register('address', { required: 'Este campo es obligatorio' })} error={Boolean(errors.address)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Departamento, piso, etc" {...register('apartment')} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Ciudad" {...register('city', { required: 'Este campo es obligatorio' })} error={Boolean(errors.city)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Provincia" {...register('state', { required: 'Este campo es obligatorio' })} error={Boolean(errors.state)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Código Postal" {...register('zipCode', { required: 'Este campo es obligatorio' })} error={Boolean(errors.zipCode)} />
                    </Grid>
                  </Grid>
                </>
              )}

              {activeStep === 2 && (
                <>
                  <Typography pb={1}>Datos del Pago</Typography>
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Número de Tarjeta" {...register('cardNumber', { required: 'Este campo es obligatorio' })} error={Boolean(errors.cardNumber)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Nombre en la Tarjeta" {...register('cardName', { required: 'Este campo es obligatorio' })} error={Boolean(errors.cardName)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Fecha de Expiración" {...register('expirationDate', { required: 'Este campo es obligatorio' })} error={Boolean(errors.expirationDate)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" type="password" label="Código de Seguridad" {...register('securityCode', { required: 'Este campo es obligatorio' })} error={Boolean(errors.securityCode)} />
                    </Grid>
                  </Grid>
                </>
              )}
              <div>
                <Button variant="contained" color="secondary" onClick={handleBackStep} disabled={activeStep === 0}>
                  Anterior
                </Button>
                {(activeStep !== checkoutSteps.length - 1) ? (
                    <Button variant="contained" color="primary" onClick={handleNextStep}>
                      Siguiente
                    </Button>
                  ) : (
                    <Button variant="contained" color="primary" type="submit">
                      Enviar
                    </Button>
                  )}
              </div>
            </form>
          </BodySingle>
          </Paper>
        </>
    )
}

export default CheckoutPage
