import type {NextPage} from 'next'
import Head from 'next/head'
import BodySingle from "dh-marvel/components/layouts/body/single/body-single";
import TextField from '@mui/material/TextField';
import { Box, Typography, type SxProps, Stepper, Step, StepButton, StepLabel, Button, Paper, Grid, Collapse } from '@mui/material';
import { useState } from 'react';
import style from '../../styles/commons.module.css';
import { useForm } from 'react-hook-form';
import { CheckoutInput } from 'dh-marvel/features/checkout/checkout.types';

const checkoutURL = (() => {
  const domain = process.env.NODE_ENV === 'development' ? 'http://localhost:3000' : 'http://vercel.com/';
  const url = new URL('/api/checkout', domain)
  return url.href;
})();

const checkoutSteps = ['Datos personales', 'Entrega', 'Pago'];

const CheckoutPage: NextPage = () => {
  const [activeStep, setActiveStep] = useState(0)
  const { register, handleSubmit, formState: { errors }, watch, trigger, clearErrors } = useForm<CheckoutInput>();
  const watchedFields = watch();
  console.log({watchedFields})
  const handleNextStep = async () => {
    await trigger();
    const valitationsPerStep = {
      0: !Boolean(errors.customer?.name || errors.customer?.lastname || errors.customer?.email),
      1: !Boolean(errors.customer?.address),
      2: true,
    }
    const validFields = valitationsPerStep[activeStep as keyof typeof valitationsPerStep];
    console.log({validFields});
    if (validFields && activeStep < checkoutSteps.length - 1) {
      setActiveStep((step) => step + 1);
      clearErrors();
    }
  };

  const handleBackStep = () => {
    if (activeStep > 0) {
      setActiveStep((step) => step - 1);
    }
  };

  const onSubmit = async (result: any) => {
    console.log({result});
    try {
      const body = { ...result, order: {
        name: 'spiderman',
        image: 'https://google.com.ar',
        price: 100.0,
      }}
      await fetch(checkoutURL, {
        method: 'POST',
        body
      });

      window.location.href = 'http://localhost:3000/checkout/success';
    } catch (err) {
      
    }

  }

    return (
        <>
          <Head>
              <title>Checkout</title>
              <meta name="description" content="Generated by create next app"/>
              <link rel="icon" href="/favicon.ico"/>
          </Head>
          <Paper elevation={3} style={{ padding: '20px', marginTop: '20px', width: '50rem' }}>
          <BodySingle>
            <Typography variant="h2">Compra</Typography>
            <Stepper activeStep={activeStep}>
              {checkoutSteps.map((label, index) => (
                <Step key={index}>
                  <StepLabel>{label}</StepLabel>
                </Step>
              ))}
            </Stepper>
            <form onSubmit={handleSubmit(onSubmit)}>
              
                <Collapse in={activeStep === 0}>
                  {/* <Typography pb={1}>Datos personales</Typography> */}
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Nombre"
                        {...register('customer.name', { required: true })}
                        error={Boolean(errors.customer?.name)}
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Apellido"
                      {...register('customer.lastname', { required: true })}
                        error={Boolean(errors.customer?.lastname)}
                      />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Email"
                        {...register('customer.email',
                          { required: true,
                            pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i, message: "Email inválido" }
                          })
                        }
                        error={Boolean(errors.customer?.email)}
                      />
                    </Grid>
                  </Grid>
                </Collapse>
                <Collapse in={activeStep === 1}>
                  {/* <Typography pb={1}>Datos de la entrega</Typography> */}
                  
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Dirección" {...register('customer.address.address1', { required: 'Este campo es obligatorio' })}
                        error={Boolean(errors.customer?.address?.address1)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Departamento, piso, etc" {...register('customer.address.address2')} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Ciudad"
                        {...register('customer.address.city', { required: 'Este campo es obligatorio' })}
                        error={Boolean(errors.customer?.address?.city)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Provincia"
                      {...register('customer.address.state', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.customer?.address?.state)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Código Postal"
                      {...register('customer.address.zipCode', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.customer?.address?.zipCode)} />
                    </Grid>
                  </Grid>
                </Collapse>

                <Collapse in={activeStep === 2}>
                  {/* <Typography pb={1}>Datos del Pago</Typography> */}
                  <Grid container spacing={3}>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Número de Tarjeta"
                      {...register('card.number', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.card?.number)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Nombre en la Tarjeta"
                      {...register('card.nameOnCard', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.card?.nameOnCard)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" label="Fecha de Expiración"
                      {...register('card.expDate', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.card?.expDate)} />
                    </Grid>
                    <Grid item xs={12}>
                      <TextField fullWidth variant="outlined" type="password" label="Código de Seguridad"
                      {...register('card.cvc', { required: 'Este campo es obligatorio' })}
                      error={Boolean(errors.card?.cvc)} />
                    </Grid>
                  </Grid>
                </Collapse>
              <div>
                <Button variant="contained" color="secondary" onClick={handleBackStep} disabled={activeStep === 0}>
                  Anterior
                </Button>
                {(activeStep !== checkoutSteps.length - 1) ? (
                    <Button variant="contained" color="primary" onClick={handleNextStep}>
                      Siguiente
                    </Button>
                  ) : (
                    <Button variant="contained" color="primary" type="submit">
                      Enviar
                    </Button>
                  )}
              </div>
            </form>
          </BodySingle>
          </Paper>
        </>
    )
}

export default CheckoutPage
